Работа с базой данных
---------------------

ЗАДАНИЕ 1
Проверить, отображается ли созданный заказ в базе данных.
Для этого: вывести список логинов курьеров с количеством их заказов в статусе «В доставке» (поле inDelivery = true). 

Запрос:
SELECT cou.login, COUNT (ord.id) AS "inDeliveryCount" FROM "Couriers" AS cou JOIN "Orders" AS ord ON cou.id = ord."courierId" WHERE ord."inDelivery" = true GROUP BY cou.login;
SELECT cou.login,
       COUNT (ord.id) AS "inDeliveryCount"
FROM "Couriers" AS cou
JOIN "Orders" AS ord ON cou.id = ord."courierId"
WHERE ord."inDelivery" = TRUE
GROUP BY cou.login;

ЗДАНИЕ 2
Протестировать статусы заказов. Убедиться, что в базе данных они записываются корректно.
Для этого: вывестии все трекеры заказов и их статусы. 
Статусы определяются по следующему правилу:
Если поле finished == true, то вывести статус 2.
Если поле canсelled == true, то вывести статус -1.
Если поле inDelivery == true, то вывести статус 1.
Для остальных случаев вывести 0.

Запрос:
SELECT track, cancelled, finished, "inDelivery" FROM "Orders";
SELECT track,
       cancelled,
       finished,
       "inDelivery"
FROM "Orders";

Запрос 2:
SELECT track, CASE WHEN finished = true THEN '2' WHEN "inDelivery" = true THEN '1' WHEN cancelled = true THEN '-1' ELSE '0' END FROM "Orders";
SELECT track,
       CASE
           WHEN finished = TRUE THEN '2'
           WHEN "inDelivery" = TRUE THEN '1'
           WHEN cancelled = TRUE THEN '-1'
           ELSE '0'
       END
FROM "Orders";


ЗАДАНИЕ 3
Автоматизация теста к API
Шаги автотеста:
1.Выполнить запрос на создание заказа.
2.Сохранить номер трека заказа.
3.Выполнить запрос на получения заказа по треку заказа.
4.Проверить, что код ответа равен 200.

configuration.py
URL_SERVICE = "https://b9bdca0f-2514-4716-84fe-196ea60c0568.serverhub.praktikum-services.ru"
CREATE_ORDER_PATH = "/api/v1/orders"
ORDER_TRACK_PATH = "/api/v1/orders/track?t="

--------------------------------------------
data.py
--------------------------------------------
rder_body = {
    "firstName": "Naruto",
    "lastName": "Uchiha",
    "address": "Konoha, 142 apt.",
    "metroStation": 4,
    "phone": "+7 800 355 35 35",
    "rentTime": 5,
    "deliveryDate": "2020-06-06",
    "comment": "Saske, come back to Konoha",
    "color": [
        "BLACK"
    ]
}

--------------------------------------------
sender_stand_request
--------------------------------------------
import configuration
import requests
import data


# Функция создания заказа и сохранения трек-номера заказа
def post_create_order(order_body):
    return requests.post(configuration.URL_SERVICE + configuration.CREATE_ORDER_PATH, json=order_body)


response = post_create_order(data.order_body)
print(response.status_code)
print(response.json()["track"])


# Функция для получения заказа по трек-номеру
def get_order_on_number():
    track = post_create_order(data.order_body).json()["track"]
    return requests.get(configuration.URL_SERVICE + configuration.ORDER_TRACK_PATH + str(track))


response = get_order_on_number()
print(response.status_code)

--------------------------------------------
test_order_by_number.py
--------------------------------------------
import sender_stand_request


# Функция для позитивной проверки
def positive_assert():
    # В переменную order_response сохраняется результат запроса на получение заказа по трек-номеру
    order_response = sender_stand_request.get_order_on_number()
    assert order_response.status_code == 200


def test_order_on_number_get_response_200():
    positive_assert()
---------------------------------------------



